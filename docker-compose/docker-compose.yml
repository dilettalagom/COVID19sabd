version: "2"

networks:
  app_network:
    driver: bridge


services:

  master:
    build:
      context: ../docker-images/spark-hdfs-node
    image: dilettalagom/spark-hdfs-node
    container_name: master
    hostname: master
    networks:
      - app_network
    ports:
      - "9870:9870" # hdfs ui
      - "54310:54310" # hdfs
      - "43211:43211" #remote intellij debugging
      - "18080:18080" #spark history ui
    volumes:
      - ./target:/target
    stdin_open: true
    tty: true
    command: bash -c "sh start-services.sh"


  worker1:
    image: dilettalagom/spark-hdfs-node
    container_name: worker1
    hostname: worker1
    networks:
      - app_network
    ports:
      - "9861:9861"
    depends_on:
      - master
    volumes:
      - ./target:/target
    stdin_open: true
    tty: true
    command: bash -c "sh start-services.sh"


  worker2:
    image: dilettalagom/spark-hdfs-node
    container_name: worker2
    hostname: worker2
    networks:
      - app_network
    ports:
      - "9862:9861"
    depends_on:
      - master
    volumes:
      - ./target:/target
    stdin_open: true
    tty: true
    command: bash -c "sh start-services.sh"

  worker3:
    image: dilettalagom/spark-hdfs-node
    container_name: worker3
    hostname: worker3
    networks:
      - app_network
    ports:
      - "9863:9861"
    depends_on:
      - master
    volumes:
      - ./target:/target
    stdin_open: true
    tty: true
    command: bash -c "sh start-services.sh"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - app_network
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  nifi:
    build:
      context: ../docker-images/nifi-node
    image: dilettalagom/nifi
    container_name: nifi
    depends_on:
      - master
    hostname: nifi
    networks:
      - app_network
    volumes:
      - ./nifi-flow:/usr/local/nifi-1.11.4/conf/flow
      - ./nifi-scripts:/usr/local/nifi-1.11.4/data/nifi-scripts
    ports:
      - "4040:4040"
      - "43212:43212"
      - "43210:43210" #remote intellij degugging port
    stdin_open: true
    tty: true


  cassandra-seed:
    image: cassandra:latest
    container_name: cassandra-seed-node
    networks:
      - app_network
    ports:
      - "9042:9042"   # Native transport
      - "7199:7199"   # JMX
      - "9160:9160"   # Thrift clients

  cassandra-node-1:
    build:
      context: ../docker-images/cassandra-node
    image: dilettalagom/cassandra
    container_name: cassandra1
    hostname: cassandra1
    networks:
      - app_network
    environment:
      - "CASSANDRA_SEEDS=cassandra-seed-node"
    depends_on:
      - "cassandra-seed"
    volumes:
      - ./cassandra-schemas:/opt/cassandra/schemas
    command: /bin/bash -c "echo 'Waiting for seed node' && sleep 30 && /docker-entrypoint.sh cassandra -f"


# tolto per mancanza di risorse
#  cassandra-node-2:
#    build:
#      context: ../docker-images/cassandra-node
#    image: dilettalagom/cassandra
#    container_name: cassandra2
#    hostname: cassandra2
#    networks:
#      - app_network
#    environment:
#      - "CASSANDRA_SEEDS=cassandra-seed-node"
#    depends_on:
#      - "cassandra-seed"
#    volumes:
#      - ./cassandra-schemas:/opt/cassandra/schemas
#    command: /bin/bash -c "echo 'Waiting for seed node' && sleep 80 && /docker-entrypoint.sh cassandra -f"


  grafana-cassandra-connector:
    build:
      context: ../docker-images/grafana-custom-connector
    image: dilettalagom/cg-connector
    container_name: grafana-cassandra-connector
    hostname: grafana-cassandra-connector
    ports:
      - 8080:5000
    networks:
      - app_network
    volumes:
      - ./grafana-connector/app:/app


  grafana:
    image: grafana/grafana
    hostname: grafana
    container_name: grafana
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - app_network
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_INSTALL_PLUGINS=simpod-json-datasource,grafana-worldmap-panel
    volumes:
      - "./grafana/provisioning/:/etc/grafana/provisioning/"
      - "./grafana/dashboard/:/var/lib/grafana/dashboards/"
    mem_limit: 1G
